version: '3.4'
services:
  hd-service:
    image: ghcr.io/hexa-ai/hexa-data:latest
    ports:
      - 3333:3333
    restart: unless-stopped
    volumes:
      - .env:/home/node/app/.env
      - v_hexa-data:/home/node/app/storage
  queue-redis-service:
    image: redis:${QUEUE_REDIS_VERSION}
    restart: always
    ports:
      - 6379:6379
    command: redis-server --save 20 1 --loglevel warning --requirepass ${QUEUE_REDIS_PASSWORD}
    volumes:
      - v_redis:/data
  mysql-service:
    image: mysql:${MYSQL_VERSION}
    command: --default-authentication-plugin=mysql_native_password
    ports:
      - 3306:3306
    restart: unless-stopped
    environment:
      - MYSQL_ROOT_PASSWORD=${MYSQL_PASSWORD}
      - MYSQL_DATABASE=hexa-data
    volumes:
      - v_mysql:/var/lib/mysql
  emqx-service:
    image: emqx/emqx:${EMQX_VERSION}
    environment:
      - EMQX_LOADED_PLUGINS="emqx_recon,emqx_retainer,emqx_management,emqx_dashboard,emqx_auth_http"
      - EMQX_AUTH__HTTP__AUTH_REQ__URL=${EMQX_AUTH__HTTP__AUTH_REQ__URL}
      - EMQX_AUTH__HTTP__AUTH_REQ__PARAMS=clientId=%c,username=%u,password=%P
      - EMQX_AUTH__HTTP__ACL_REQ__URL=${EMQX_AUTH__HTTP__ACL_REQ__URL}
      - EMQX_AUTH__HTTP__ACL_REQ__PARAMS=access=%A,username=%u,clientId=%c,ipaddr=%a,topic=%t,mountpoint=%m
      - EMQX_ZONE__EXTERNAL__PUBLISH_LIMIT=${EMQX_ZONE__EXTERNAL__PUBLISH_LIMIT}
    volumes:
      - v_emqx-data:/opt/emqx/data
      - v_emqx-etc:/opt/emqx/etc
      - v_emqx-log:/opt/emqx/log
    ports:
      - 8883:8883
      - 1883:1883
      - 3000:18083

    extra_hosts:
      - 'host.docker.internal:host-gateway'
    restart: unless-stopped
  warp10-service:
    image: warp10io/warp10:${WARP10_VERSION}
    environment:
      - WARP10_HEAP=${WARP10_HEAP}
      - WARP10_HEAP_MAX=${WARP10_HEAP}
      - accelerator=true
      - accelerator.ephemeral=false
      - accelerator.chunk.length=60000000
      - accelerator.chunk.count=300
      - accelerator.preload=true
      - accelerator.preload.poolsize=8
      - accelerator.preload.batchsize=1000
      - ingress.attributes.allowdelta=true
      - warpscript.extension.token=${WARP10_WARPSCRIPT_EXTENSION_TOKEN}
      - token.secret=${WARP10_SECRET}
      - warpscript.maxops=${WARP10_WARPSCRIPT_MAXOPS}
      - warpscript.maxops.hard=${WARP10_WARPSCRIPT_MAXOPS_HARD}
      - warpfleet.macros.repos=${WARP10_WARPFLEET_MACROS_REPOS}
      - warpscript.maxfetch=${WARP10_MAXFETCH}
      - warpscript.maxfetch.hard=${WARP10_MAXFETCH_HARD}
      - warpscript.maxdepth=${WARP10_MAXDEPTH}
      - warpscript.maxdepth.hard=${WARP10_MAXDEPTH_HARD}
      - warpscript.maxsymbols=${WARP10_MAXSYMBOLS}
      - warpscript.maxloop.hard=${WARP10_MAXLOOP_HARD}
      - warpfleet.macros.ttl=${WARPFLEET_MACROS_TTL}
      - warpscript.extension.http=io.warp10.script.ext.http.HttpWarpScriptExtension
      - warpscript.http.authentication.required=true
      - 'warpscript.http.host.patterns=.*'
      - max.encoder.size=1000000
    volumes:
      - v_warp10:/data
    ports:
      - 8080:8080
    extra_hosts:
      - 'host.docker.internal:host-gateway'
    restart: unless-stopped
  warpfleetsynchronizer-service:
    build:
      context: .
      dockerfile: dockerfile-wfs
    ports:
      - 8082:8082
    volumes:
      - v_warpfleetsynchronizer:/data
  grafana:
    image: grafana/grafana-oss:${GRAFANA_VERSION}
    ports:
      - 30001:3000
    restart: unless-stopped
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_ADMIN_PASSWORD}
      - GF_SECURITY_ADMIN_USER=${GRAFANA_ADMIN_USER}
      - GF_SECURITY_ALLOW_EMBEDDING=true
    volumes:
      - v_grafana:/var/lib/grafana

volumes:
  v_mysql:
  v_emqx-data:
  v_emqx-etc:
  v_emqx-log:
  v_warp10:
  v_hexa-data:
  v_node-red:
  v_redis:
  v_warpfleetsynchronizer:
  v_grafana: